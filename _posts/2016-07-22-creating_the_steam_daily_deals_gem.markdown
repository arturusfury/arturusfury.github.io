---
layout: post
title:  "Creating the Steam Daily Deals Gem"
date:   2016-07-22 15:42:49 -0400
---


So I’m going to work on recording this a little bit each day to mark my thoughts and progress through this assessment and project.


**Wednesday, July 20th**

Today I started to create my gem by creating file structures and files manually using a few different gem’s I found on github. I quickly realized that wasn’t going to work out well since there were so many different files that needed to work together and I just didn’t have the knowledge I needed yet to complete this process.  So I sat down to watch the video tutorial from Avi.  Quickly he goes through the ‘bundle gem (gem name)’ command to generate your structure and I was like bam! Nice and easy, but wait … why do all of these files work together like so. What does this pre-generated structure of files actually do for me? Now I have to go back through this generated set of files and figure out what they all are and how they all work. It’s times like these that the magic of Ruby makes me feel like I’m getting a little dumber and that I’m gaining less of an understanding of how these things work by just using the magic commands. Sure they work great, but to really sit down and figure out the WHY really makes you take a half step back and dig into it.

So after all of that I am sitting here with a set of files and directories for my gem and now I’m ready to start working so I kick back over to the video from Avi. We go through setting up the basic CLI with a bunch of dummy data and I pause the video to take time to make my interface look fancy. Well maybe not fancy, but I spend some time trying to make it easy to read and nice to look at. I don’t want it to be an assault on your eyes every time someone launches my little program, but now I wonder if I wasted too much time on something that from my project standpoint doesn’t really gain me much. I feel like a clean UX/UI would be like 1 or 2 percent of my total grade when compared to total functionality of my program and making sure my program is ruby-ish. All thoughts that go through my mind, but it’s done and I can’t get the time back.

I’m happy with it at least so it’s time to move on to the actual program methods. I sit down to watch some more of Avi’s video and it strikes me, where is my TDD? Here we are writing basic methods that output pre generated data, but where are my tests? Why am I not writing tests to see if said command outputs this text, or see if these methods return the values I think they should. Even if I’m using dummy data I can’t help the feeling that I should be doing something different. So I’m sitting here with a bunch of methods that I’ve already created and now I have to do TDD in reverse. I need to create tests for my methods to pass, and then make my methods pass these test’s I’ve created because these methods already exist and they need tests. It just became such a frustrating moment on top of everything else that it was time to call it a day.  I will come back to it tomorrow and see what life brings.


**Thursday, July 21st**

So sitting down this morning I decided that I would begin by writing my tests. I looked through a couple other gem’s and there weren’t a lot of tests to be found which confused me. I always thought ruby was a heavily driven TDD language. Either way … it might make my project take a little longer but I’m going to do what I can and see what happens.  Keep moving forward right?

I started in the reverse order in which I was starting gem. Instead of starting at the CLI and working my way out I decided to start with my scraper and work my way from there. This way I would hopefully have data to work with for the rests of my tests. I went and saved a copy of all of the pages I would be using to test with and then started working on getting a basic collection to test against.  It wasn’t long before I came across a few things that I needed to refine in my collection.  Instead of just a single key for rating I needed to have multiple keys for the possibility to hold two different types of ratings, recent and overall.  After spending a decent amount of time getting this collection of data setup, now I need to write my tests so that then I can actually write my code.  Sometimes I wonder why we do TDD and why I argued so much for it just a little while ago …

I don’t know how easy it will be to relay the headaches and problems of today, but I’m going to do my best without going overboard. So I sat down to write these tests for my TDD. I knew what sort of data I wanted to get so I started writing my structures and hashes with hard coded data to test against. This was a lot of copy and paste to get my hashes filled out the way I wanted, but in the end it was done. Great! Now I started to write my methods to get this data so I could start to pass my tests. I started with hard coded data just to make sure the tests I had written would actually work. They did, yay! Now it was time to setup my loops to run through my data and generate my array and hashes. This wasn’t the first time we had done something like this so I was able to get through that pretty easy with a little copy paste. Why waste time? Tests … passing, yay!!

Then came the headache and struggle I had for almost 7 hours … that was a long time. The Steam website uses javascript to generate the scrolling boxes I wanted to scrape content from so every time I tried to use Nokogiri to get that content, it failed. Well at first I wasn’t sure why it had failed, but it did. So spending a lot of time in IRB I finally figured out what my problem was. Javascript and Nokogiri don’t play nice together. Well crap, now what am I going to do.  I spent so long trying to google search my way to victory.  A couple of items kept appearing, but I couldn’t find any clear cut way of how to use them. Of course no one was doing EXACTLY what I was doing which was fine, but it takes time to piece together parts from 5 different Stack Overflow answers to try and hack something together an see if it works. Then when it doesn’t tear it all apart and do it again. Hours and hours of doing something and it not working, then having to try something else and then have it fail on me, then trying something else and so one and so forth. Finally I got it halfway working. I could get an array of all of the items I needed using Selenium, PhantomJS and Nokogiri. Yay! Double Yay! I finally was making headway again.

So now after all of that trouble I’m going to sit down and record my code video where I now go through and see if I can get this data parsed out and then output that to the user!

So I did a little video which took about 45 minutes to record. It was actually kind of fun to work through the process while recording, I might end up doing it more often. I finally got my tests passing as they scrape code from my html documents and compare it against my hard coded information. That’s a huge step!  I had to add some special funky stuff to get pass the age gate and I need to add one more to get past the mature content filter pages that Steam has, but that’s one of the nice things Selenium does for me. I can tell it to select an option from a dropdown box and click on it like a real user would and the browser accepts those commands and then continues on to the next page. Kinda cool really. I might need to do some more experiments with it and do a blog post about just that. I could see it being useful for testing Rails or Sinatra type projects.


**Friday, July 22nd**

So after a long day yesterday I finally felt like I was making some progress at the end of it. It took me a lot longer then I had hoped but I got my scraping methods setup and working. Now it was time to do something with that data. The methods for displaying the information was something we had done before so using those as a template I was able to quickly get through my information and get it displayed. Now I needed to format my information and then get it into my CLI methods and I would be done! I can see the light at the end of the tunnel and I don’t think it’s a train this time!

All of what I said before about using those as a template worked, just not quite as cleanly as I had hoped. It took me a little while to figure some bugs in my methods out and track down why some pages were loading and some weren’t. Back into the Selenium guides I go. After a little bit of time though I got all of that straightened out and it was time for some live testing. Launching the program I was a little nervous but I knew it needed to happen. My logo screen displayed, my information loaded and it was good! Took a little while to load, but there was a lot going on in the background. I decided to add some text to the front page to let users know it might take a little while to scrape our data. In the end I added a progress bar that goes across the screen as our data is scraped and loaded. A good visual representation of the program working even if the user doesn’t see anything happening.

A few hours later I’ve recorded my walkthrough video (and even fixed a bug during the recording), I’ve bundled my gem, uploaded everything to github and I am in the process of exporting my video now and hoping this watermark on the video isn’t super bad. I’m using Screenflow and I like it, but wasn’t ready to drop $99 bucks for it just yet.  Waiting for my export to finish and then I’ll submit my project and see what happens.
